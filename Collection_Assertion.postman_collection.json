{
	"info": {
		"_postman_id": "1aa0b8f2-d8d8-4fe9-91b9-d52daf17fa8f",
		"name": "Collection Assertion",
		"description": "In this collection, I have added 21 collection level Assertions and generating HTML report for the same collection.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26140461",
		"_collection_link": "https://www.postman.com/adii-knolder/workspace/my-workspace/collection/26140461-1aa0b8f2-d8d8-4fe9-91b9-d52daf17fa8f?action=share&creator=26140461&source=collection_link"
	},
	"item": [
		{
			"name": "20 Collection Assertion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response body contains string 'name'\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"name\");",
							"});",
							"",
							"pm.test(\"Response body does not contain string 'error'\", function () {",
							"    pm.expect(pm.response.text()).to.not.include(\"error\");",
							"});",
							"",
							"pm.test(\"Response body is a valid JSON object\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response header contains 'application/json'\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Response header does not contain 'text/html'\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(\"text/html\");",
							"});",
							"",
							"pm.test(\"Response time is between 5ms and 1500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.within(5, 1500);",
							"});",
							"",
							"pm.test(\"Response body has length of 996\", function () {",
							"    pm.expect(pm.response.text()).to.have.lengthOf(996);",
							"});",
							"",
							"pm.test(\"Response body has array with length of 6\", function () {",
							"    pm.expect(pm.response.json().data).to.have.lengthOf(6);",
							"});",
							"",
							"pm.test(\"Response body has object with 'avatar' property\", function () {",
							"    pm.expect(pm.response.json().data[0]).to.have.property(\"avatar\");",
							"});",
							"",
							"pm.test(\"Response body does not have 'address' property\", function () {",
							"    pm.expect(pm.response.json().data[0]).to.not.have.property(\"address\");",
							"});",
							"",
							"pm.test(\"Response body has non-null 'id' value\", function () {",
							"    pm.expect(pm.response.json().data[0].id).to.not.be.null;",
							"});",
							"",
							"pm.test(\"Response body has 'id' value greater than or equal to 1\", function () {",
							"    pm.expect(pm.response.json().data[0].id).to.be.at.least(1);",
							"});",
							"",
							"pm.test(\"Response body has 'id' value between 1 and 6\", function () {",
							"    pm.expect(pm.response.json().data[0].id).to.be.within(1, 6);",
							"});",
							"",
							"pm.test(\"Response body has at least one user with the first name 'Janet'\", function () {",
							"    const users = pm.response.json().data;",
							"    pm.expect(users.some(user => user.first_name === \"Janet\")).to.be.true;",
							"});",
							"",
							"pm.test(\"Response body has no users with the last name 'Smith'\", function () {",
							"    const users = pm.response.json().data;",
							"    pm.expect(users.every(user => user.last_name !== \"Smith\")).to.be.true;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response body contains only unique user IDs\", function () {",
							"    const users = pm.response.json().data;",
							"    const userIds = users.map(user => user.id);",
							"    pm.expect([...new Set(userIds)]).to.have.lengthOf(userIds.length);",
							"});",
							"",
							"pm.test(\"Response body has an array of users sorted in ascending order by ID\", function () {",
							"    const users = pm.response.json().data;",
							"    const sortedUsers = [...users].sort((a, b) => a.id - b.id);",
							"    pm.expect(users).to.deep.equal(sortedUsers);",
							"});",
							"",
							"pm.test(\"Response body has at least one user with an email address that includes 'reqres.in'\", function () {",
							"    const users = pm.response.json().data;",
							"    pm.expect(users.every(user => user.email.includes(\"reqres.in\"))).to.be.true;",
							"});",
							"",
							"pm.test(\"Response body has at least one user with a last name that includes 'Ramos'\", function () {",
							"    const users = pm.response.json().data;",
							"    pm.expect(users.any(user => user.last_name.includes(\"Ramos\"))).to.be.true;",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		}
	]
}